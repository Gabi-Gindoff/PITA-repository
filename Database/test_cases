# test_pita.py

# db_config.py
# DB_CONFIG = {
    # 'host': 'local',
    # 'user': 'root',
    # 'password': '',
    # 'database': pita,
# }

import pytest
import pymysql
from db_config import DB_CONFIG


# create database connection
@pytest.fixture
def db_connection():
    connection = pymysql.connect(**DB_CONFIG)
    yield connection
    connection.close()


# test to see if 'Account' table exists
def test_account_table_exists(db_connection):
    with db_connection.cursor() as cursor:
        cursor.execute("SHOW TABLES LIKE 'Account'")
        result = cursor.fetchone()
        assert result is not None


# Test to check if the 'Chat' table exists
def test_chat_table_exists(db_connection):
    with db_connection.cursor() as cursor:
        cursor.execute("SHOW TABLES LIKE 'Chat'")
        result = cursor.fetchone()
        assert result is not None


# Test to check if the 'Message' table exists
def test_message_table_exists(db_connection):
    with db_connection.cursor() as cursor:
        cursor.execute("SHOW TABLES LIKE 'Message'")
        result = cursor.fetchone()
        assert result is not None


# Test to check if the 'HelpDeskTickets' table exists
def test_helpdesk_tickets_table_exists(db_connection):
    with db_connection.cursor() as cursor:
        cursor.execute("SHOW TABLES LIKE 'HelpDeskTickets'")
        result = cursor.fetchone()
        assert result is not None


# Test to check if the 'AIResponse' table exists
def test_ai_response_table_exists(db_connection):
    with db_connection.cursor() as cursor:
        cursor.execute("SHOW TABLES LIKE 'AIResponse'")
        result = cursor.fetchone()
        assert result is not None


# Test to check if a new account can be inserted into the 'Account' table
def test_insert_account(db_connection):
    with db_connection.cursor() as cursor:
        # Insert a new account
        cursor.execute("INSERT INTO Account (email, firstName, lastName) VALUES (%s, %s, %s)",
                       ("test@example.com", "Test", "User"))
        db_connection.commit()

        # Retrieve the inserted account from the database
        cursor.execute("SELECT * FROM Account WHERE email='test@example.com'")
        result = cursor.fetchone()

        # Check if the inserted account exists and has correct values
        assert result is not None
        assert result[1] == "test@example.com"
        assert result[2] == "Test"
        assert result[3] == "User"


# Test to check if a new chat can be inserted into the 'Chat' table
def test_insert_chat(db_connection):
    with db_connection.cursor() as cursor:
        # Insert a new chat
        cursor.execute("INSERT INTO Chat (chatID, startTime, endTime) VALUES (%s, %s, %s)",
                       (1, "2023-10-25 10:00:00", "2023-10-25 11:00:00"))
        db_connection.commit()

        # Retrieve the inserted chat from the database
        cursor.execute("SELECT * FROM Chat WHERE chatID=1")
        result = cursor.fetchone()

        # Check if the inserted chat exists and has correct values
        assert result is not None
        assert result[0] == 1
        assert str(result[1]) == "2023-10-25 10:00:00"
        assert str(result[2]) == "2023-10-25 11:00:00"


# Test to check if a new message can be inserted into the 'Message' table
def test_insert_message(db_connection):
    with db_connection.cursor() as cursor:
        # Insert a new message
        cursor.execute("INSERT INTO Message (messageID, text, timestamp, email, chatID) VALUES (%s, %s, %s, %s, %s)",
                       (1, "Hello, World!", "2023-10-25 10:30:00", "test@example.com", 1))
        db_connection.commit()

        # Retrieve the inserted message from the database
        cursor.execute("SELECT * FROM Message WHERE messageID=1")
        result = cursor.fetchone()

        # Check if the inserted message exists and has correct values
        assert result is not None
        assert result[0] == 1
        assert result[1] == "Hello, World!"
        assert str(result[2]) == "2023-10-25 10:30:00"
        assert result[3] == "test@example.com"
        assert result[4] == 1


# Test to check if a new HelpDeskTicket can be inserted into the 'HelpDeskTickets' table
def test_insert_helpdesk_ticket(db_connection):
    with db_connection.cursor() as cursor:
        # Insert a new HelpDeskTicket
        cursor.execute("INSERT INTO HelpDeskTickets (inforID, question, response, date, category) VALUES (%s, %s, %s, %s, %s)",
                       (20, "How to reset password?", "You can reset your password through the portal.", "2023-10-25", "Account"))
        db_connection.commit()

        # Retrieve the inserted HelpDeskTicket from the database
        cursor.execute("SELECT * FROM HelpDeskTickets WHERE inforID=20")
        result = cursor.fetchone()

        # Check if the inserted HelpDeskTicket exists and has correct values
        assert result is not None
        assert result[0] == 20
        assert result[1] == "How to reset password?"
        assert result[2] == "You can reset your password through the portal."
        assert str(result[3]) == "2023-10-25"
        assert result[4] == "Account"


# Test to check if a message can be updated in the 'Message' table
def test_update_message(db_connection):
    with db_connection.cursor() as cursor:
        # Insert a new message
        cursor.execute("INSERT INTO Message (messageID, text, timestamp, email, chatID) VALUES (%s, %s, %s, %s, %s)",
                       (2, "Original Message", "2023-10-25 12:00:00", "test@example.com", 1))
        db_connection.commit()

        # Update the message text
        cursor.execute("UPDATE Message SET text=%s WHERE messageID=2",
                       ("Updated Message",))
        db_connection.commit()

        # Retrieve the updated message from the database
        cursor.execute("SELECT text FROM Message WHERE messageID=2")
        result = cursor.fetchone()

        # Check if the message text has been updated
        assert result[0] == "Updated Message"


# Test to check if a HelpDeskTicket can be deleted from the 'HelpDeskTickets' table
def test_delete_helpdesk_ticket(db_connection):
    with db_connection.cursor() as cursor:
        # Insert a new HelpDeskTicket
        cursor.execute("INSERT INTO HelpDeskTickets (inforID, question, response, date, category) VALUES (%s, %s, %s, %s, %s)",
                       (30, "Delete Me", "I should be deleted", "2023-10-25", "Test"))
        db_connection.commit()

        # Delete the HelpDeskTicket
        cursor.execute("DELETE FROM HelpDeskTickets WHERE inforID=30")
        db_connection.commit()

        # Try to retrieve the deleted HelpDeskTicket
        cursor.execute("SELECT * FROM HelpDeskTickets WHERE inforID=30")
        result = cursor.fetchone()

        # Check if the HelpDeskTicket has been deleted
        assert result is None


# Test to check if a foreign key constraint works properly (attempting to insert a message with non-existing email)
def test_foreign_key_constraint(db_connection):
    with db_connection.cursor() as cursor:
        # Try to insert a message with a non-existing email
        with pytest.raises(pymysql.err.IntegrityError):
            cursor.execute("INSERT INTO Message (messageID, text, timestamp, email, chatID) VALUES (%s, %s, %s, %s, %s)",
                           (3, "Invalid Message", "2023-10-25 13:00:00", "nonexistent@example.com", 1))
            db_connection.commit()


# Test to check if a foreign key constraint works properly (attempting to delete an Account with associated messages)
def test_foreign_key_delete_constraint(db_connection):
    with db_connection.cursor() as cursor:
        # Try to delete an Account with associated messages
        with pytest.raises(pymysql.err.IntegrityError):
            cursor.execute("DELETE FROM Account WHERE email='test@example.com'")
            db_connection.commit()


# Test to retrieve help desk tickets for a specific category
def test_retrieve_helpdesk_tickets_by_category(db_connection):
    with db_connection.cursor() as cursor:
        category = "Printer"
        cursor.execute("SELECT * FROM HelpDeskTickets WHERE category=%s", (category,))
        result = cursor.fetchall()
        assert len(result) > 0
        for row in result:
            assert row[4] == category


# Test to retrieve messages for a specific chat
def test_retrieve_messages_by_chat(db_connection):
    with db_connection.cursor() as cursor:
        chat_id = 1
        cursor.execute("SELECT * FROM Message WHERE chatID=%s", (chat_id,))
        result = cursor.fetchall()
        assert len(result) > 0
        for row in result:
            assert row[4] == chat_id


# Test to retrieve AI responses for a specific chat and help desk ticket
def test_retrieve_ai_responses_by_chat_and_ticket(db_connection):
    with db_connection.cursor() as cursor:
        chat_id = 1
        ticket_id = 1
        cursor.execute("SELECT * FROM AIResponse WHERE chatID=%s AND inforID=%s", (chat_id, ticket_id))
        result = cursor.fetchall()
        assert len(result) > 0
        for row in result:
            assert row[3] == chat_id
            assert row[4] == ticket_id


# Test to retrieve account info for a specific email
def test_retrieve_account_by_email(db_connection):
    with db_connection.cursor() as cursor:
        email = "test@example.com"
        cursor.execute("SELECT * FROM Account WHERE email=%s", (email,))
        result = cursor.fetchone()
        assert result is not None
        assert result[0] == email


# Test to retrieve message with user information
def test_retrieve_messages_with_user_info(db_connection):
    with db_connection.cursor() as cursor:
        chat_id = 1
        cursor.execute("SELECT Message.*, Account.firstName, Account.lastName FROM Message JOIN Account ON Message.email=Account.email WHERE chatID=%s", (chat_id,))
        result = cursor.fetchall()
        assert len(result) > 0
        for row in result:
            assert row[4] == chat_id
            assert row[5] is not None
            assert row[6] is not None


# Test to retrieve help desk tickets with AI responses
def test_retrieve_helpdesk_tickets_with_ai_responses(db_connection):
    with db_connection.cursor() as cursor:
        cursor.execute("SELECT HelpDeskTickets.*, AIResponse.text AS ai_response FROM HelpDeskTickets LEFT JOIN AIResponse ON HelpDeskTickets.inforID=AIResponse.inforID")
        result = cursor.fetchall()
        assert len(result) > 0
        for row in result:
            assert row[0] is not None
            assert row[1] is not None
            assert row[2] is not None
            assert row[3] is not None
            assert row[4] is not None


# Test to retrieve chat info with messages
def test_retrieve_chat_with_messages(db_connection):
    with db_connection.cursor() as cursor:
        chat_id = 1
        cursor.execute("SELECT Chat.*, Message.text FROM Chat JOIN Message ON Chat.chatID=Message.chatID WHERE Chat.chatID=%s", (chat_id,))
        result = cursor.fetchall()
        assert len(result) > 0
        for row in result:
            assert row[0] == chat_id
            assert row[1] is not None
            assert row[2] is not None
            assert row[3] is not None


# Test to retrieve account info with messages and help desk tickets
def test_retrieve_account_with_messages_and_tickets(db_connection):
    with db_connection.cursor() as cursor:
        email = "test@example.com"
        cursor.execute("SELECT Account.*, Message.text AS message_text, HelpDeskTickets.question FROM Account LEFT JOIN Message ON Account.email=Message.email LEFT JOIN HelpDeskTickets ON Account.email=HelpDeskTickets.email WHERE Account.email=%s", (email,))
        result = cursor.fetchone()
        assert result is not None
        assert result[0] == email
        assert result[1] is not None
        assert result[2] is not None


# pytest test_pita.py
